const fs = require('fs');
const path = require('path');

/**
 * Generates a Mermaid diagram for the board_relation connection flow
 * Reads from board-relation-flow-trace.json and creates a visual representation
 */

async function generateBoardRelationMermaid() {
  console.log('🎨 Generating Mermaid Diagram for Board Relation Flow\n');
  
  try {
    // Read the flow trace data
    const tracePath = path.join(__dirname, '../../output/flow-accounts-to-epo-ingredients-trace.json');
    
    if (!fs.existsSync(tracePath)) {
      console.log('❌ Flow trace file not found. Run trace-board-relation-flow.js first.');
      return;
    }
    
    const flowData = JSON.parse(fs.readFileSync(tracePath, 'utf8'));
    
    // Start building the Mermaid diagram
    let mermaid = `# Board Relation Connection Flow Diagram

Generated: ${new Date().toISOString()}
Source: flow-accounts-to-epo-ingredients-trace.json

\`\`\`mermaid
flowchart TD
    %% Define the board relation connection flow
    %% Accounts → Dev Deals → Development → EPO - Ingredients
    
    %% Workspace Subgraphs
    subgraph CRM ["🏢 CRM Workspace"]
        ACC["📋 Accounts<br/>ID: 9161287533<br/>🔗 9 board_relations<br/>🪞 7 mirrors"]
        DEV_DEALS["📋 Dev Deals<br/>ID: 9161287503<br/>🔗 3 board_relations<br/>🪞 3 mirrors"]
    end
    
    subgraph LAB ["🏢 Lab Workspace"]
        DEVELOPMENT["📋 Development<br/>ID: 8446397459<br/>🔗 11 board_relations<br/>🪞 8 mirrors"]
    end
    
    subgraph VRM ["🏢 VRM - Purchasing Workspace"]
        EPO_ING["📋 EPO - Ingredients<br/>ID: 9387127195<br/>🔗 7 board_relations<br/>🪞 1 mirror"]
    end
    
    %% Primary board_relation connections
`;

    // Add the main flow connections
    flowData.flow.forEach((step, index) => {
      if (step.nextBoard) {
        const connectionType = step.connectionMethod === 'board_relation' ? '==>' : '-->';
        const connectionColor = step.connectionMethod === 'board_relation' ? 'stroke:#2563eb,stroke-width:3px' : 'stroke:#64748b,stroke-width:2px';
        const connectionLabel = `"🔗 ${step.nextBoard.connectionColumn}"`;
        
        // Map board names to node IDs
        const currentNodeId = getNodeId(step.board.name);
        const nextNodeId = getNodeId(step.nextBoard.name);
        
        mermaid += `    ${currentNodeId} ${connectionType} ${nextNodeId}\n`;
        mermaid += `    linkStyle ${index} ${connectionColor}\n`;
      }
    });

    // Add connection labels and styling
    mermaid += `
    %% Connection Labels
`;

    let linkIndex = 0;
    flowData.flow.forEach(step => {
      if (step.nextBoard) {
        const currentNodeId = getNodeId(step.board.name);
        const nextNodeId = getNodeId(step.nextBoard.name);
        mermaid += `    ${currentNodeId} -.->|"${step.nextBoard.connectionColumn}"| ${nextNodeId}\n`;
        linkIndex++;
      }
    });

    mermaid += `
    %% Styling
    classDef boardRelation fill:#dbeafe,stroke:#2563eb,stroke-width:2px,color:#1e40af
    classDef workspace fill:#f8fafc,stroke:#64748b,stroke-width:1px
    
    class ACC,DEV_DEALS,DEVELOPMENT,EPO_ING boardRelation
    
    %% Legend
    subgraph LEGEND ["📝 Legend"]
        LEGEND_BR["🔗 board_relation<br/>(Primary Connection)"]
        LEGEND_MR["🪞 mirror<br/>(Derived Data)"]
    end
    
    classDef legend fill:#fef3c7,stroke:#d97706,stroke-width:1px
    class LEGEND_BR,LEGEND_MR legend
\`\`\`

## 📊 Flow Analysis

### Connection Types Used
`;

    // Add analysis
    flowData.insights.forEach(insight => {
      mermaid += `- ${insight}\n`;
    });

    mermaid += `
### Key Insights
- **Primary Method**: All connections use \`board_relation\` columns (most reliable)
- **Cross-Workspace Flow**: Spans 3 workspaces (CRM → Lab → VRM - Purchasing)
- **Connection Density**: Each board has multiple \`board_relation\` connections
- **Data Flow**: Accounts → Dev Deals → Development → EPO - Ingredients

### Board Relation Columns Found
`;

    flowData.flow.forEach(step => {
      if (step.primaryConnections.length > 0) {
        mermaid += `
**${step.board.name}** (${step.primaryConnections.length} board_relations):
`;
        step.primaryConnections.forEach(conn => {
          const connected = conn.connectedBoardIds.length > 0 ? ` → [${conn.connectedBoardIds.join(', ')}]` : '';
          mermaid += `- ${conn.columnName}${connected}\n`;
        });
      }
    });

    mermaid += `
---
*Generated by trace-board-relation-flow.js*
*Method: board_relation primary navigation*
`;

    // Save the diagram
    const outputPath = path.join(__dirname, '../../output/flow-accounts-to-epo-ingredients-diagram.md');
    fs.writeFileSync(outputPath, mermaid);
    
    console.log('✅ Mermaid diagram generated successfully');
    console.log(`📁 Saved to: output/flow-accounts-to-epo-ingredients-diagram.md`);
    
    // Print summary
    console.log('\n📈 Diagram Statistics:');
    console.log(`   Total boards: ${flowData.flow.length}`);
    console.log(`   Workspaces: ${new Set(flowData.flow.map(s => s.board.workspace)).size}`);
    console.log(`   Primary connections: ${flowData.flow.filter(s => s.connectionMethod === 'board_relation').length}`);
    console.log(`   Total board_relations found: ${flowData.flow.reduce((sum, s) => sum + s.primaryConnections.length, 0)}`);
    
    console.log('\n🎯 Flow Path:');
    flowData.flow.forEach((step, index) => {
      if (step.nextBoard) {
        const icon = step.connectionMethod === 'board_relation' ? '🔗' : '🪞';
        console.log(`   ${step.step}. ${step.board.name} ${icon} ${step.nextBoard.name}`);
      } else {
        console.log(`   ${step.step}. ${step.board.name} (destination)`);
      }
    });
    
    return outputPath;
    
  } catch (error) {
    console.error('❌ Error generating Mermaid diagram:', error.message);
    throw error;
  }
}

function getNodeId(boardName) {
  const mapping = {
    'Accounts': 'ACC',
    'Dev Deals': 'DEV_DEALS', 
    'Development': 'DEVELOPMENT',
    'EPO - Ingredients': 'EPO_ING'
  };
  return mapping[boardName] || boardName.toUpperCase().replace(/[^A-Z]/g, '_');
}

// Run if called directly
if (require.main === module) {
  generateBoardRelationMermaid().catch(console.error);
}

module.exports = { generateBoardRelationMermaid };